'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DelegateTransitionGroupChild = function (_Component) {
    _inherits(DelegateTransitionGroupChild, _Component);

    function DelegateTransitionGroupChild() {
        _classCallCheck(this, DelegateTransitionGroupChild);

        return _possibleConstructorReturn(this, (DelegateTransitionGroupChild.__proto__ || Object.getPrototypeOf(DelegateTransitionGroupChild)).apply(this, arguments));
    }

    _createClass(DelegateTransitionGroupChild, [{
        key: 'componentWillAppear',
        value: function componentWillAppear(callback) {
            var onAppear = this.props.onAppear;


            if (onAppear) {
                onAppear(this, callback);
            } else {
                callback();
            }
        }
    }, {
        key: 'componentWillEnter',
        value: function componentWillEnter(callback) {
            var onEnter = this.props.onEnter;


            if (onEnter) {
                onEnter(this, callback);
            } else {
                callback();
            }
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave(callback) {
            var onLeave = this.props.onLeave;


            if (onLeave) {
                onLeave(this, callback);
            } else {
                callback();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return this.props.children;
        }
    }]);

    return DelegateTransitionGroupChild;
}(_react.Component);

DelegateTransitionGroupChild.propTypes = {
    children: _propTypes2.default.node,
    onAppear: _propTypes2.default.func,
    onEnter: _propTypes2.default.func,
    onLeave: _propTypes2.default.func
};
exports.default = DelegateTransitionGroupChild;